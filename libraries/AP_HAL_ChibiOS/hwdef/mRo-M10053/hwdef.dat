# hw definition file for processing by chibios_pins.py

# MCU class and specific type
MCU STM32G431 STM32G431xx

# bootloader starts firmware at 26kB (24k bootloader + 2k (STORAGE_FLASH_PAGES))
FLASH_RESERVE_START_KB 24

FLASH_SIZE_KB 128

# parameter storage:
STORAGE_FLASH_PAGE 62
define HAL_STORAGE_SIZE 800

# board ID for firmware load
APJ_BOARD_ID 1121

# setup build for a peripheral firmware
env AP_PERIPH 1
#env OPTIMIZE -O3

# crystal frequency
OSCILLATOR_HZ 8000000

define CH_CFG_ST_FREQUENCY 1000

# order of UARTs
#SERIAL_ORDER USART1
define HAL_NO_UARTDRIVER
define HAL_USE_SERIAL FALSE
define STM32_SERIAL_USE_USART1 FALSE
define STM32_SERIAL_USE_USART2 FALSE
define STM32_SERIAL_USE_USART3 FALSE

# a LED to flash
PB4 LED OUTPUT HIGH
define HAL_LED_ON 1

# USART1, connected to GPS
#PA9  USART1_TX USART1 SPEED_HIGH NODMA
#PA10 USART1_RX USART1 SPEED_HIGH NODMA

# USART2 for debug (disabled)
#PA2 USART2_TX USART2 SPEED_HIGH NODMA
#PA3 USART2_RX USART2 SPEED_HIGH NODMA

define HAL_UART_NODMA


# SPI1 VN-BARO
PA5 SPI1_SCK SPI1
PA6 SPI1_MISO SPI1
PA7 SPI1_MOSI SPI1

# SPI2 VN131CM
PB13 SPI2_SCK SPI2
PB14 SPI2_MISO SPI2
PB15 SPI2_MOSI SPI2

# I2C
PA8 I2C2_SDA I2C2
PA9 I2C2_SCL I2C2

define HAL_USE_I2C TRUE

# Order for I2C sensors
I2C_ORDER I2C2

define HAL_I2C_INTERNAL_MASK 0

define HAL_I2C_MAX_CLOCK 100000

# analog input
#PA0 VIN5 ADC1
define HAL_USE_ADC FALSE
define STM32_ADC_USE_ADC1 FALSE
define HAL_DISABLE_ADC_DRIVER FALSE

define HAL_NO_GPIO_IRQ
define CH_CFG_ST_TIMEDELTA 0
#define CH_CFG_USE_DYNAMIC FALSE
define SERIAL_BUFFERS_SIZE 256
define PORT_INT_REQUIRED_STACK 64

# avoid timer and RCIN threads to save memory
define HAL_NO_TIMER_THREAD
define HAL_NO_RCOUT_THREAD
define HAL_NO_RCIN_THREAD

define HAL_USE_RTC FALSE
define DISABLE_SERIAL_ESC_COMM TRUE

define DMA_RESERVE_SIZE 0

# MAIN_STACK is stack of initial thread and ISRs
MAIN_STACK 0x200

# PROCESS_STACK controls stack for main thread
PROCESS_STACK 0xA00
define HAL_DISABLE_LOOP_DELAY

# CS pins for SPI sensors. The labels for all CS pins need to
# match the SPI device table later in this file.
PB0 BARO_CS CS
PB12 ARSPD_CS CS

# enable CAN support
PA11 CAN1_RX CAN1
PA12 CAN1_TX CAN1

# reduce memory overheads
define HAL_CAN_POOL_SIZE 2000

# SPI table
SPIDEV vnbaro SPI1 DEVID1 BARO_CS MODE3 5*MHZ 5*MHZ
SPIDEV vn131cm SPI2 DEVID1 ARSPD_CS MODE3 5*MHZ 5*MHZ

define HAL_UART_MIN_TX_SIZE 64
define HAL_UART_MIN_RX_SIZE 64

define HAL_UART_STACK_SIZE 0
define STORAGE_THD_WA_SIZE 256
define IO_THD_WA_SIZE      256

define HAL_NO_MONITOR_THREAD
#define HAL_PERIPH_LISTEN_FOR_SERIAL_UART_REBOOT_CMD_PORT 0

define HAL_DEVICE_THREAD_STACK 256

define AP_PARAM_MAX_EMBEDDED_PARAM 0

# bootloader embedding / bootloader flashing not available
define AP_BOOTLOADER_FLASHING_ENABLED 0

# keep ROMFS uncompressed as we don't have enough RAM
# to uncompress the bootloader at runtime
env ROMFS_UNCOMPRESSED True

# reduce the number of CAN RX Buffer
define HAL_CAN_RX_QUEUE_SIZE 32

# disable stack checking to reduce flash cost
define CH_DBG_ENABLE_STACK_CHECK FALSE

define CAN_APP_NODE_NAME "io.mrobotics.m10053"

# Airspeed configuration:
define HAL_PERIPH_ENABLE_AIRSPEED
define AP_AIRSPEED_BACKEND_DEFAULT_ENABLED 0
define AP_AIRSPEED_SST_ND_ENABLED   1
define HAL_AIRSPEED_BUS_DEFAULT 0
define HAL_AIRSPEED_TYPE_DEFAULT 16
define AIRSPEED_MAX_SENSORS 1

# Baro configuration:
define HAL_PERIPH_ENABLE_BARO
define AP_BARO_BACKEND_DEFAULT_ENABLED 0
define AP_BARO_ND015A_ENABLED 1

# Baro 
BARO ND015A SPI:vnbaro
AIRSPEED SST_ND SPI:vn131cm

# debugger support
PA13 JTMS-SWDIO SWD
PA14 JTCK-SWCLK SWD

#DMA_NOSHARE *